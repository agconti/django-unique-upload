{"name":"Django-unique-upload","tagline":"A django utility that creates unique file names for uploaded files via uuids. ","body":"# django-unique-upload\r\n[![Build Status](https://travis-ci.org/agconti/django-unique-upload.svg?branch=master)](https://travis-ci.org/agconti/django-unique-upload)\r\n\r\nA django utility that creates unique file names for uploaded files via uuids.\r\n\r\n## Why\r\nThis eliminates the need to check if the a file already exists with the same name. Checking incurs overhead. Removing the need to check boosts performance. Popular pacakges like django storages don't check if a file already exists with the same name by default. They instead overwrite the file. Using unique file names ensures that no file is over written.\r\n\r\n## Install\r\n```bash\r\npip install django-unique-upload\r\n```\r\n\r\n## Usage\r\nSimply use the `unique_upload` function as value for a model's `FileField` or `ImageField` `upload_to` argument:\r\n```python\r\nfrom __future__ import unicode_literals\r\n\r\nfrom django.db import models\r\nfrom django.utils.encoding import python_2_unicode_compatible\r\nfrom unique_upload import unique_upload\r\n\r\n\r\n@python_2_unicode_compatible\r\nclass MyModel(modles.Model):\r\n    image = models.ImageField(upload_to=unique_upload)\r\n    file = models.FileField(upload_to=unique_upload)\r\n```\r\nNow if we give save `MyModel` with two new files,  `cool-image.jpg` and `really-important.pdf`, Django will save the files to S3 with the values: `3fce8b21-5b0d-4f27-9d99-2bb202f211c7.jpg` and `50a44439-843e-4049-949d-b54cfcddff19.pdf`.\r\n\r\n## Tests\r\nRun the devepment tests with:\r\n```bash\r\npython -m unittest discover test\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}